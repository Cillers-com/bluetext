templates:
  - id: stack
    run:
      - redpanda
      - redpanda-console
      - init

modules:
  - id: redpanda
    info: Redpanda message broker with persistent storage
    module: polytope/redpanda
    args:
      data-volume: { id: redpanda-data, type: volume, scope: project }

  - id: redpanda-console
    info: Redpanda Console web UI
    module: redpanda-console-base
    args:
      port: pt.value redpanda_console_port
      redpanda-port: pt.value redpanda_port

  - id: redpanda-console-base
    info: Redpanda Console web UI base module
    module: polytope/redpanda!console
    params:
      - id: port
        type: [default, str, "8080"]
      - id: redpanda-port
        type: [default, str, "9092"]
    args:
      brokers:
        - host: pt.value redpanda_host
          port: "#pt-js parseInt(params['redpandaPort'])"
      admin-url: "http://{pt.value redpanda_host}:9644"
      port: "#pt-js parseInt(params['port'])"

  - id: init
    info: Manages Redpanda topics and Couchbase buckets/scopes/collections
    module: polytope/container
    args:
      image: us-central1-docker.pkg.dev/arched-inkwell-420116/cillers-repo/cillers-init:latest
      id: init
      restart: { policy: on-failure, max-restarts: 3 }
      env:
        - { name: ENVIRONMENT, value: pt.value environment }
        - { name: INIT_SERVICES, value: redpanda }
        - { name: REDPANDA_HOST, value: pt.value redpanda_host }
        - { name: REDPANDA_PORT, value: pt.value redpanda_port }
      mounts:
        - { path: /conf/init, source: { type: host, path: ./conf/init } }
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache } }

  - id: boilerplate
    module: polytope/container
    params:
      - id: target-path
        info: Path relative to the repo root where the module's code will be created
        type: str
      - id: blueprint
        info: Blueprint to use for the module
        type: [enum, frontend, python-api]
    args:
      image: ubuntu
      cmd:
        - sh
        - -c
        - |
          set -eu
          echo "Creating boilerplate code from the $BLUEPRINT blueprint at $TARGET_PATH..."
          if [ -d "$TARGET_PATH" ]; then
            if [ "$(ls -A "$TARGET_PATH")" ]; then
              echo "ERROR: The target path '$TARGET_PATH' already exists and is not empty. Please choose a different path."
              exit 1
            fi
          else
            mkdir -p "$TARGET_PATH"
          fi
          cp -r .blueprints/$BLUEPRINT/boilerplate/* "$TARGET_PATH"
          echo "Done!"
      workdir: /repo
      mounts:
        - path: /repo
          source:
            type: host
            path: ''
      env:
        - name: TARGET_PATH
          value: pt.param target-path
        - name: BLUEPRINT
          value: pt.param blueprint

  - id: add-package-python
    info: Adds uv packages in a Python module
    module: polytope/container
    params:
      - id: packages
        info: Comma-separated list of packages to add
        type: str
      - id: module-code-path
        info: Relative path of the module code's root directory
        type: str
    args:
      image: python:3.13-slim
      cmd:
        - sh
        - -c
        - |
          set -eu
          echo "Installing uv..."
          pip install uv
          echo "Adding python packages: $PACKAGES"
          cd "/module-code"
          if [ ! -f "pyproject.toml" ]; then
            echo "ERROR: No pyproject.toml found"
            exit 1
          fi
          # Add packages to pyproject.toml
          uv add $PACKAGES
          echo "Done!"
      mounts:
        - path: /module-code
          source:
            type: host
            path: pt.param module-code-path
      env:
        - name: PACKAGES
          value: pt.param packages

  - id: add-package-npm
    info: Adds npm packages in an npm compatible module, such as Node.js, Deno or Bun. 
    module: polytope/container
    params:
      - id: packages
        info: Space-separated list of packages to add
        type: str
      - id: module-code-path
        info: Relative path of the module's code root directory
        type: str
    args:
      image: node:18-slim
      cmd:
        - sh
        - -c
        - |
          set -eu
          echo "Adding npm packages: $PACKAGES"
          cd "/module-code"
          if [ ! -f "package.json" ]; then
            echo "ERROR: No package.json found"
            exit 1
          fi
          # Add packages using yarn with --no-install flag
          yarn add $PACKAGES --no-install 
          echo "Done!"
      mounts:
        - path: /module-code
          source:
            type: host
            path: pt.param module-code-path
      env:
        - name: PACKAGES
          value: pt.param packages
